//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.Service
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConsoleClient.Service.IService")]
    public interface IService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Add", ReplyAction="http://tempuri.org/IService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Subtract", ReplyAction="http://tempuri.org/IService/SubtractResponse")]
        System.Threading.Tasks.Task<int> SubtractAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Multiply", ReplyAction="http://tempuri.org/IService/MultiplyResponse")]
        System.Threading.Tasks.Task<int> MultiplyAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Divide", ReplyAction="http://tempuri.org/IService/DivideResponse")]
        System.Threading.Tasks.Task<float> DivideAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CelsiusToFahrenheit", ReplyAction="http://tempuri.org/IService/CelsiusToFahrenheitResponse")]
        System.Threading.Tasks.Task<double> CelsiusToFahrenheitAsync(double celsius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FahrenheitToCelsius", ReplyAction="http://tempuri.org/IService/FahrenheitToCelsiusResponse")]
        System.Threading.Tasks.Task<double> FahrenheitToCelsiusAsync(double fahrenheit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CelsiusToKelvin", ReplyAction="http://tempuri.org/IService/CelsiusToKelvinResponse")]
        System.Threading.Tasks.Task<double> CelsiusToKelvinAsync(double celsius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/KelvinToCelsius", ReplyAction="http://tempuri.org/IService/KelvinToCelsiusResponse")]
        System.Threading.Tasks.Task<double> KelvinToCelsiusAsync(double kelvin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Max", ReplyAction="http://tempuri.org/IService/MaxResponse")]
        System.Threading.Tasks.Task<int> MaxAsync(int[] numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Min", ReplyAction="http://tempuri.org/IService/MinResponse")]
        System.Threading.Tasks.Task<int> MinAsync(int[] numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Sum", ReplyAction="http://tempuri.org/IService/SumResponse")]
        System.Threading.Tasks.Task<int> SumAsync(int[] numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Average", ReplyAction="http://tempuri.org/IService/AverageResponse")]
        System.Threading.Tasks.Task<double> AverageAsync(int[] numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIndex", ReplyAction="http://tempuri.org/IService/GetIndexResponse")]
        System.Threading.Tasks.Task<int> GetIndexAsync(int[] numbers, int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/HelloWorld", ReplyAction="http://tempuri.org/IService/HelloWorldResponse")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Reverse", ReplyAction="http://tempuri.org/IService/ReverseResponse")]
        System.Threading.Tasks.Task<string> ReverseAsync(string text);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IServiceChannel : ConsoleClient.Service.IService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ConsoleClient.Service.IService>, ConsoleClient.Service.IService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int a, int b)
        {
            return base.Channel.AddAsync(a, b);
        }
        
        public System.Threading.Tasks.Task<int> SubtractAsync(int a, int b)
        {
            return base.Channel.SubtractAsync(a, b);
        }
        
        public System.Threading.Tasks.Task<int> MultiplyAsync(int a, int b)
        {
            return base.Channel.MultiplyAsync(a, b);
        }
        
        public System.Threading.Tasks.Task<float> DivideAsync(int a, int b)
        {
            return base.Channel.DivideAsync(a, b);
        }
        
        public System.Threading.Tasks.Task<double> CelsiusToFahrenheitAsync(double celsius)
        {
            return base.Channel.CelsiusToFahrenheitAsync(celsius);
        }
        
        public System.Threading.Tasks.Task<double> FahrenheitToCelsiusAsync(double fahrenheit)
        {
            return base.Channel.FahrenheitToCelsiusAsync(fahrenheit);
        }
        
        public System.Threading.Tasks.Task<double> CelsiusToKelvinAsync(double celsius)
        {
            return base.Channel.CelsiusToKelvinAsync(celsius);
        }
        
        public System.Threading.Tasks.Task<double> KelvinToCelsiusAsync(double kelvin)
        {
            return base.Channel.KelvinToCelsiusAsync(kelvin);
        }
        
        public System.Threading.Tasks.Task<int> MaxAsync(int[] numbers)
        {
            return base.Channel.MaxAsync(numbers);
        }
        
        public System.Threading.Tasks.Task<int> MinAsync(int[] numbers)
        {
            return base.Channel.MinAsync(numbers);
        }
        
        public System.Threading.Tasks.Task<int> SumAsync(int[] numbers)
        {
            return base.Channel.SumAsync(numbers);
        }
        
        public System.Threading.Tasks.Task<double> AverageAsync(int[] numbers)
        {
            return base.Channel.AverageAsync(numbers);
        }
        
        public System.Threading.Tasks.Task<int> GetIndexAsync(int[] numbers, int number)
        {
            return base.Channel.GetIndexAsync(numbers, number);
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync()
        {
            return base.Channel.HelloWorldAsync();
        }
        
        public System.Threading.Tasks.Task<string> ReverseAsync(string text)
        {
            return base.Channel.ReverseAsync(text);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:5001/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService,
        }
    }
}
